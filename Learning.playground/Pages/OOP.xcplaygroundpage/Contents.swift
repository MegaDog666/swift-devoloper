import Foundation


/*
 
 // ООП
 
 // Создать = Инициализировать (init) = выделение памяти
 // Разрушать = Деиницилизировать (deinit) = очищение памяти (удаляем обьект из памяти)
 
 // Автоматический подсчет ссылок (ARC)
 // Живой подсчет количества обьектов в памяти
 // Создаем 1 обьемк он увеличится на 1, если создадим 2 то увеличится на 2, если удалим 1 то уменьшится на 1
 // Чем выше число счетчика тем труднее приложению
 
 // Мы хотим как можно меньше было ARC
 // Мы хотим создать объекты только тогда, когда они нам нужны
 // И когда они нам не нужны мы их тоже удаляем
 
 // Приложение имеет 2 экрана, пользователь переходит с 1 на 2, мы выделяем только тогда, когда пользователь хочет его увидеть, и наоборот
 
 // 2 типа памяти:
 // Стек и куча
 // Только объекты в куче засчитываются в ARC
 
 // Объекты которые находятся в стеке
 // String, Bool, Int, most basic types
 // Новые: Struct, Enums
 
 // Объекты которые нахотся в куче
 // Func
 // Новые: Class, Actors
 
 
 // iPhone = многопоточная среда
 // Каждый поток имеет свой собственный стек
 // Но для всех потоков существует только одна куча
 
 // Стек работает быстрее
 // Куча работает медленнее
 
 // Значения (VALUE) vs Ссылочный тип
 
 // объект в стеке тип значения (VALUE)
 // когда мы редактируем тип значения мы создаем копию с новыми данными
 
 // объект в куче это ссылочный тип
 // когда мы редактируем ссылочный тип, то мы редактируем тип к которому ссылаемся (Типо оригинал) Ссылка называется указателем, потому что она указывает на объект в куче памяти
 */


struct myFirstObject {
    let tittle: String = "Hello World"
}

class mySecondObject {
    let tittle: String = "Hello World"
}


