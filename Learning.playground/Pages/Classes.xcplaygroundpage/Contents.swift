import Foundation

// Классы идут медленнее
// Классы хранятся в куче, таким образом они являются ссылочными

// Поэтому когда мы меняем ссылочный тип, то мы меняем его полностью, типо как оригинал, а в структурах у нас происходит копирование, поэтому мы должны делать мутации, чтоб изменить структуру, для классов это так не работает, изменив класс мы меняем его полностью без никаких мутаций.


// В этом классе будут все данные для того чтоб показать нам экран
class screenViewModel {
    
    let title: String
    private(set) var showButton: Bool
    
    // Тот же самый иницилизатор в Структуре, просто в структуре есть неявный иницилизатор, просто структура может предполагать каким должен был быть иницилизатор, а класс нет
    init(title: String, showButton: Bool) {
        self.title = title
        self.showButton = showButton
    }
    
    deinit {
        // Эта операция выполняется по мере удаления объекта из памяти
        // Структуры не имею функции deint, структуры не имею в связи того что по своей природе структуры, так как они являются типами значение, мы их копируем и вставляем, мутируем ее и т.д, и когда вызываем структуру то когда она заканчивается, то она самоуничтожается по сути, а класс нет, он продолжает жить в памяти, поэтому мы и можем деиницилизировать класс, а структуру нет
        // Каждый раз мы меняем значения в классе, то они остаются живыми)
        // Он существует, но редко используется((
    }
    
    func hideButton() {
        showButton = false
    }
    
    func updateShowButton(newValue: Bool) {
        showButton = newValue
    }
    
}

let viewModel: screenViewModel = screenViewModel(title: "Screen 1", showButton: true)

viewModel.hideButton()
viewModel.updateShowButton(newValue: false)
